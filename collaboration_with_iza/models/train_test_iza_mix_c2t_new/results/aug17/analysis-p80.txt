Example 13:
titleEntities: {'Subject': ['Russian'], 'Date': ['2014', '2020']}
title: Euro to Russian Ruble monthly exchange rate 2014 to 2020
X_Axis['Month']: ["Jan_'20", "Dec_'19", "Nov_'19", "Oct_'19", "Sep_'19", "Aug_'19", "Jul_'19", "Jun_'19", "May_'19", "Apr_'19", "Mar_'19", "Feb_'19", "Jan_'19", "Dec_'18", "Nov_'18", "Oct_'18", "Sep_'18", "Aug_'18", "Jul_'18", "Jun_'18", "May_'18", "Apr_'18", "Mar_'18", "Feb_'18", "Jan_'18", "Dec_'17", "Nov_'17", "Oct_'17", "Sep_'17", "Aug_'17", "Jul_'17", "Jun_'17", "May_'17", "Apr_'17", "Mar_'17", "Feb_'17", "Jan_'17", "Dec_'16", "Nov_'16", "Oct_'16", "Sep_'16", "Aug_'16", "Jul_'16", "Jun_'16", "May_'16", "Apr_'16", "Mar_'16", "Feb_'16", "Jan_'16", "Dec_'15", "Nov_'15", "Oct_'15", "Sep_'15", "Aug_'15", "Jul_'15", "Jun_'15", "May_'15", "Apr_'15", "Mar_'15", "Feb_'15", "Jan_'15", "Dec_'14", "Nov_'14", "Oct_'14", "Sep_'14", "Aug_'14", "Jul_'14", "Jun_'14", "May_'14", "Apr_'14", "Mar_'14", "Feb_'14", "Jan_'14"]
Y_Axis['Exchange', 'rate']: ['70.34', '69.96', '70.55', '71.36', '70.76', '73.41', '70.8', '71.6', '72.91', '72.21', '72.86', '75.09', '75.11', '79.72', '76.07', '74.41', '76.14', '79.1', '73.21', '73.16', '72.58', '75.96', '70.89', '68.75', '70.07', '69.39', '69.19', '67.87', '68.25', '69.12', '70.46', '67.54', '63.71', '62.11', '60.31', '61.76', '64.43', '65.38', '69.53', '69.01', '72.24', '72.8', '71.24', '73.15', '74.47', '75.43', '77.94', '85.62', '83.86', '80.67', '69.99', '70.57', '73.24', '74.86', '66.86', '62.36', '57.46', '57.65', '62.44', '69.2', '79.93', '72.34', '61.35', '53.86', '49.77', '48.74', '47.52', '46.38', '47.31', '49.46', '48.78', '49.94', '47.75']

gold: This statistic displays the monthly exchange rate ( as of the end of each month ) of the euro to the Russian ruble ( EUR/RUB ) , according to data from the European Central Bank , from January 2014 to January 2020 . The concrete , or point in time , measure shows the exchange rate as of the last day of each month , which is different to the standardized measure ; calculation of average based on observations throughout the period in question.Monthly change After seeing a height of 85.6 rubles to the euro in February 2016 , the monthly exchange rate has fluctuated . Between December 2018 and January 2020 , the end of month exchange rate between the euro and Russian ruble has seen a downward trend .
gold_template: This statistic displays the templateTitle[3] templateYLabel[0] templateYLabel[1] ( as of the end of each templateXLabel[0] ) of the templateTitle[0] to the templateTitleSubject[0] ( EUR/RUB ) , according to data from the European Central Bank , from templateTitleDate[min] to templateTitleDate[max] . The concrete , or point in time , measure shows the templateYLabel[0] templateYLabel[1] as of the last day of each templateXLabel[0] , which is different to the standardized measure ; calculation of average based on observations throughout the period in question.Monthly templateYLabel[0] After seeing a height of templateYValue[max] templateTitleSubject[0] to the templateTitle[0] in , the templateTitle[3] templateYLabel[0] templateYLabel[1] has fluctuated . Between and templateTitleDate[max] , the end of templateXLabel[0] templateYLabel[0] templateYLabel[1] between the templateTitle[0] and templateTitleSubject[0] has seen a downward trend .

generated_template: This statistic displays the templateTitle[3] templateYLabel[0] templateYLabel[1] ( as of the end of each templateXLabel[0] ) of the templateTitle[0] to the templateTitleSubject[0] templateTitle[2] sterling ( EURGBP ) , according to data from the European Central Bank , from templateTitleDate[min] to templateTitleDate[max] . The concrete , or point in time , measure shows the templateYLabel[0] templateYLabel[1] as of the last day of each templateXLabel[0] , which is different to the standardized measure ; calculation of average based on observations throughout the period in question . templateTitle[2] fluctuates in uncertainty During the period under observation , the templateTitle[3] templateYLabel[0] templateYLabel[1] of the templateTitle[0] to the templateTitleSubject[0] templateTitle[2] fluctuated .
generated: This statistic displays the monthly Exchange rate ( as of the end of each Month ) of the Euro to the Russian Ruble sterling ( EURGBP ) , according to data from the European Central Bank , from 2014 to 2020 .  The concrete , or point in time , measure shows the Exchange rate as of the last day of each Month , which is different to the standardized measure ; calculation of average based on observations throughout the period in question .  Ruble fluctuates in uncertainty During the period under observation , the monthly Exchange rate of the Euro to the Russian Ruble fluctuated .

Example 49:
titleEntities: {'Subject': ['Number M A'], 'Date': ['2019']}
title: Number of M & A deals in the U.S. 2019 , by deal value
X_Axis['Deal', 'value', 'in', 'million', 'U.S.', 'dollars']: ['More_than_1000', '500_to_999', '250_to_499.9', '100_to_249.9', '50_to_99.9', '25_to_49.9', '10_to_24.9', 'Under_10', 'Undisclosed', 'Total']
Y_Axis['Number', 'of', 'deals']: ['281', '205', '293', '441', '361', '348', '370', '698', '9716', '12713']

gold: The statistic presents the number of M & A deals in the United States as of September 2019 , by deal value . In that year , there were 281 M & A transactions valued at more than one billion U.S. dollars in the United States . The overall number of M & A deals in the 12 months ending September 30 , 2019 amounted to 12,713 .
gold_template: The statistic presents the templateYLabel[0] of templateTitleSubject[0] templateTitle[2] A templateXLabel[0] in the templateTitle[4] as of templateTitleDate[0] , templateTitle[6] templateXLabel[0] templateXLabel[1] . In that year , there were templateYValue[0] templateTitleSubject[0] templateTitle[2] A transactions templateXLabel[1] at templateXValue[0] one templateScale templateXLabel[3] templateXLabel[4] in the templateTitle[4] . The overall templateYLabel[0] of templateTitleSubject[0] templateTitle[2] A templateXLabel[0] in the 12 months ending 30 , templateTitleDate[0] amounted to templateYValue[max] .

generated_template: The statistic shows the templateTitle[0] templateTitle[1] templateYLabel[1] in the templateTitleSubject[0] templateTitle[4] templateTitle[5] in templateTitleDate[0] . In that year , templateXValue[0] was the templateTitle[0] templateTitle[4] templateTitle[1] templateYLabel[1] in the templateTitle[3] at templateYValue[max] templateScale templateYLabel[3] .
generated: The statistic shows the Number M deals in the Number M A U.S. 2019 in .  In that year , More_than_1000 was the Number U.S. M deals in the deals at 12713 million deals .

Example 52:
titleEntities: {'Subject': ['German'], 'Date': ['2019']}
title: German national football team - players with the most goals 2019
X_Axis['Month']: ['Miroslav_Klose', 'Gerd_Müller', 'Joachim_Streich', 'Lukas_Podolski', 'Jürgen_Klinsmann', 'Rudi_Völler', 'Karl-Heinz_Rummenigge', 'Uwe_Seeler', 'Michael_Ballack', 'Thomas_Müller', 'Oliver_Bierhoff', 'Ulf_Kirsten', 'Fritz_Walter', 'Klaus_Fischer', 'Mario_Gomez', 'Ernst_Lehner', 'Andreas_Möller', 'Edmund_Conen', 'Eberhard_Vogel', 'Hans-Jürgen_Kreische', 'Bastian_Schweinsteiger', 'Richard_Hofmann', 'Mesut_Özil', 'Lothar_Matthäus', 'André_Schürrle', 'Helmut_Rahn', 'Max_Morlock', 'Rainer_Ernst', 'Karl_Hohmann', 'Kevin_Kurányi', 'Jürgen_Sparwasser', 'Henning_Frenzel', 'Pierre_Littbarski', 'Andreas_Thom', 'Toni_Kroos', 'Wolfgang_Overath', 'Klaus_Allofs', 'Otto_Siffling', 'Helmut_Schön', 'Martin_Hoffmann', 'Mario_Götze', 'Karl-Heinz_Riedle', 'Willi_Hahnemann', 'Peter_Ducke', 'Jürgen_Nöldner', 'Hans_Schäfer', 'Franz_Beckenbauer', 'Matthias_Sammer', 'Jupp_Heynckes', 'Tull_Harder']
Y_Axis['Number', 'of', 'goals']: ['71', '68', '59', '49', '47', '47', '45', '43', '42', '38', '37', '34', '33', '32', '31', '31', '29', '27', '27', '27', '24', '24', '23', '23', '22', '21', '21', '20', '20', '19', '19', '19', '18', '18', '17', '17', '17', '17', '17', '17', '17', '16', '16', '16', '16', '15', '14', '14', '14', '14']

gold: Miroslav Klose tops the current ranking , having scored 71 goals during his time playing for the German national football team in international matches . Besides playing for Germany , notably in the team that won the title in the FIFA World Cup in 2014 , his career includes such clubs as Bayern Munich and Werder Bremen . German football stars Miroslav Klose is the leading goal scorer of all time , though experts predict the next player to take the crown could be Gerd Müller .
gold_template: templateXValue[0] tops the current ranking , having scored templateYValue[max] templateYLabel[1] during his time playing for the templateTitleSubject[0] templateTitle[1] templateTitle[2] templateTitle[3] in international matches . Besides playing for templateTitleSubject[0] , notably in the templateTitle[3] that won the title in the FIFA World Cup in , his career includes such clubs as Bayern Munich and Werder Bremen . templateTitleSubject[0] templateTitle[2] stars templateXValue[0] is the leading templateYLabel[1] scorer of all time , though experts predict the next templateTitle[4] to take the crown could be templateXValue[1] .

generated_template: templateXValue[0] is the most successful templateYLabel[1] templateTitle[3] in the templateTitleSubject[0] with a total of templateYValue[max] according to the templateYLabel[0] templateYLabel[1] Consultancy group . Out of the top templateYValue[12] ranked templateXValue[0] , the country had 31 different templateXValue[0] on the list . An American legacy templateXValue[0] is by far the most prestigious templateXValue[0] in the country .
generated: Miroslav_Klose is the most successful goals team in the German with a total of 71 according to the Number goals Consultancy group .  Out of the top 33 ranked Miroslav_Klose , the country had 31 different Miroslav_Klose on the list .  An American legacy Miroslav_Klose is by far the most prestigious Miroslav_Klose in the country .

Example 112:
titleEntities: {'Subject': ['Luxury'], 'Date': ['2017']}
title: Luxury brand social media engagement generated by top influencers 2017
X_Axis['Brand', '(top', 'influencer)']: ['Valentino_(Demi_Lovato)', 'Tory_Burch_(Shay_Mitchell)', "Tod's_(Naomi_Campbell)", 'Tiffany_&_Co._(Reese_Witherspoon)', 'Salvatore_Ferragamo_(Nina_Dobrev)', 'Saint_Laurent_(J_Balvin)', 'Prada_(Chiara_Ferragni)', 'Michael_Kors_(Blake_Lively)', 'Louis_Vuitton_(Kevin_Ma)', 'Hugo_Boss_(Mariano_Di_Vaio)', 'Hermes_(Xenia_Tchoumi)', 'Gucci_(Nina_Dobrev)', 'Givenchy_(Nicki_Minaj)', 'Fendi_(Gigi_Hadid)', 'Dolce_&_Gabbana_(Cameron_Dallas)', 'Dior_(Rihanna)', 'Chanel_(Cara_Delevigne)', 'Celine_(Kim_Kardashian)', 'Cartier_(Nikkie_Tutorials)', 'Burberry_(Dove_Cameron)', 'Bulgari_(Bella_Hadid)', 'Bottega_Veneta_(Kris_Jenner)', 'Balenciaga_(Nicki_Minaj)', 'Average']
Y_Axis['Number', 'of', 'social', 'media', 'actions', 'per', 'post']: ['1385467', '134751', '40647', '77643', '601316', '181475', '116169', '759670', '26689', '91041', '27692', '458444', '629753', '653272', '742342', '629179', '662894', '1182087', '290287', '447287', '591423', '102457', '341862', '442341']

gold: This statistic presents the number of social media actions generated per post by top luxury brand influencer . During the first quarter of 2017 , an average social media post by Kim Kardashian generated 1.2 million social media actions . Kardashian is the top influencer for luxury brand Celine .
gold_template: This statistic presents the templateYLabel[0] of templateYLabel[1] templateYLabel[2] templateYLabel[3] templateTitle[5] templateYLabel[4] templateYLabel[5] templateTitle[6] templateXLabel[1] templateTitleSubject[0] templateXLabel[0] templateXLabel[2] . During the first quarter of templateTitleDate[0] , an templateXValue[last] templateYLabel[1] templateYLabel[2] templateYLabel[5] templateTitle[6] templateXValue[17] templateTitle[5] templateYValue[17] templateScale templateYLabel[1] templateYLabel[2] templateYLabel[3] . templateXValue[17] is the templateXLabel[1] templateXLabel[2] for templateTitleSubject[0] templateXLabel[0] templateXValue[17] .

generated_template: templateXValue[0] templateTitle[5] the templateTitle[1] templateYLabel[0] templateYLabel[1] during the templateTitle[7] templateTitle[5] One football templateYLabel[0] in templateTitleSubject[0] , at templateYValue[max] British pounds , followed templateTitle[8] templateXValue[1] and templateXValue[2] for templateYValue[1] and templateYValue[2] British pounds respectively . At the same time , templateXValue[1] also sold the most expensive templateYLabel[0] templateYLabel[1] in templateTitle[5] One at 500 British pounds , giving templateXValue[1] 's templateYLabel[0] templateYLabel[1] the widest templateYLabel[2] range . The English templateTitle[5] One is the third highest football templateTitle[5] in templateTitleSubject[0] , behind the Championship and the Premier templateTitle[5] .
generated: Valentino_(Demi_Lovato) generated the brand Number social during the top generated One football Number in Luxury , at 1385467 British pounds , followed influencers Tory_Burch_(Shay_Mitchell) and Tod's_(Naomi_Campbell) for 134751 and 40647 British pounds respectively .  At the same time , Tory_Burch_(Shay_Mitchell) also sold the most expensive Number social in generated One at 500 British pounds , giving Tory_Burch_(Shay_Mitchell) 's Number social the widest media range .  The English generated One is the third highest football generated in Luxury , behind the Championship and the Premier generated .

Example 151:
titleEntities: {'Subject': ['United States'], 'Date': ['2019']}
title: YouTube usage penetration in the United States 2019 , by gender
X_Axis['Sex']: ['Male', 'Female']
Y_Axis['Reach']: ['68', '67']

gold: According to a third quarter 2019 survey , 68 percent of male internet users in the United States used YouTube . The video platform had a usage reach of 67 percent among female U.S. internet users . Overall , 38 percent of U.S. YouTube users accessed the platform several times a day .
gold_template: According to a third quarter templateTitleDate[0] survey , templateYValue[max] templateScale of templateXValue[0] internet users in the templateTitleSubject[1] used templateTitleSubject[0] . The video platform had a templateTitle[1] templateYLabel[0] of templateYValue[min] templateScale among templateXValue[last] templateTitle[4] internet users . Overall , 38 templateScale of templateTitle[4] templateTitleSubject[0] users accessed the platform several times a day .

generated_template: This statistic shows the share of adults in the templateTitleSubject[0] who were using templateTitle[0] as of templateTitleDate[0] , sorted templateTitle[6] templateTitle[7] . During that period of time , templateYValue[max] templateScale of templateXValue[0] respondents templateTitleSubject[0] that they used the social networking site .
generated: This statistic shows the share of adults in the United States who were using YouTube as of 2019 , sorted by gender .  During that period of time , 68 % of Male respondents United States that they used the social networking site .

Example 202:
titleEntities: {'Subject': ['Italians'], 'Date': ['2017']}
title: Persons with whom Italians cheat on their partners 2017
X_Axis['Response']: ['Friend', 'Colleague_from_work', 'Stranger_met_in_a_particular_context_(disco_gym_holidays_etc.)', 'Neighbor', 'Does_not_reply', 'Partner_of_a_friend_of_mine', 'Stranger_met_by_chance', 'Escort', 'Family_member']
Y_Axis['Share', 'of', 'respondents']: ['25.4', '22.6', '17.5', '10.7', '9.3', '5.3', '4.4', '3.5', '1.3']

gold: A survey conducted in 2017 reveals that the largest groups of Italian respondents cheated on their partner either with a friend or with a colleague . In particular , 25.4 percent of interviewees in Italy stated that they betrayed their partner with a friend , while 22.6 percent did so with a colleague . However , it was common to cheat with strangers as well .
gold_template: A survey conducted in templateTitleDate[0] reveals that the largest groups of templateTitleSubject[0] templateYLabel[1] cheated on templateTitle[5] templateXValue[5] either templateTitle[1] a templateXValue[0] or templateTitle[1] a templateXValue[1] . In templateXValue[2] , templateYValue[max] templateScale of interviewees in Italy stated that they betrayed templateTitle[5] templateXValue[5] templateTitle[1] a templateXValue[0] , while templateYValue[1] templateScale did so templateTitle[1] a templateXValue[1] . However , it was common to templateTitle[4] templateTitle[1] templateXValue[2] as well .

generated_template: This statistic shows the templateTitle[0] templateTitle[1] templateTitle[2] of templateTitle[3] templateXValue[0] templateYLabel[1] from templateTitleSubject[0] in templateTitleDate[0] . During the Deloitte survey , templateYValue[max] templateScale of templateYLabel[1] stated that templateXValue[0] the templateXValue[0] or templateXValue[0] was their favorite templateTitle[2] of templateTitle[3] .
generated: This statistic shows the Persons with whom of Italians Friend respondents from Italians in 2017 .  During the Deloitte survey , 25.4 % of respondents stated that Friend the or Friend was their favorite whom of Italians .

Example 316:
titleEntities: {'Subject': ['Alibaba', 'MAU'], 'Date': ['2019']}
title: Alibaba : mobile user MAU Q4 2016-Q4 2019
X_Axis['Quarter']: ["Q4_'19", "Q3_'19", "Q2_'19", "Q1_'19", "Q4_'18", "Q3_'18", "Q2_'18", "Q1_'18", "Q4_'17", "Q3_'17", "Q2_'17", "Q1_'17", "Q4_'16"]
Y_Axis['Active', 'Alibaba', 'mobile', 'users', 'in', 'millions']: ['824', '785', '755', '721', '699', '666', '634', '617', '580', '549', '529', '507', '493']

gold: This statistic gives information on the consolidated number of monthly active mobile users ( MAU ) across Alibaba 's online shopping properties from the fourth quarter of 2016 to the fourth quarter of 2019 . As of the last quarter of 2019 , Alibaba 's Chinese e-commerce properties had been accessed by around 824 million mobile MAU .
gold_template: This statistic gives information on the consolidated number of monthly templateYLabel[0] templateYLabel[2] templateYLabel[3] ( templateTitleSubject[1] ) across templateYLabel[1] 's online shopping properties from the fourth templateXLabel[0] of to the fourth templateXLabel[0] of templateTitleDate[0] . As of the last templateXLabel[0] of templateTitleDate[0] , templateYLabel[1] 's Chinese e-commerce properties had been accessed by around templateYValue[max] templateScale templateYLabel[2] templateTitleSubject[1] .

generated_template: This statistic shows the templateXLabel[0] templateScale templateYLabel[1] in templateTitle[5] templateTitle[6] templateTitle[7] templateTitle[1] templateTitle[2] in the templateTitle[0] templateYLabel[2] templateTitleDate[min] to templateTitleDate[max] . The data are seasonally adjusted at annual rates . templateTitle[2] is the output per hour of all persons .
generated: This statistic shows the Quarter millions Alibaba in 2016-Q4 2019 mobile user in the Alibaba mobile 2019 to .  The data are seasonally adjusted at annual rates .  user is the output per hour of all persons .

Example 492:
titleEntities: {'Subject': ['Asia'], 'Date': ['2010']}
title: Money spent on higher education in Asia in 2010
X_Axis['Continent']: ['North_America', 'Europe', 'Asia', 'Africa']
Y_Axis['Million', 'Pounds']: ['200', '100', '320', '50']

gold: This graph explores the money spent on higher education in Asia in 2010 . The amount is in millions pounds . Asia spent £ 320 m which is 3 x more than europes total of £ 100 m .
gold_template: This graph explores the templateTitle[0] templateTitle[1] on templateTitle[2] templateTitle[3] in templateXValue[2] in templateYValue[0] . The amount is in templateScale templateYLabel[1] . templateXValue[2] templateTitle[1] £ templateYValue[max] m which is 3 x more than templateXValue[1] total of £ templateYValue[1] m .

generated_template: This graph describes the amount of templateTitle[0] templateTitle[1] on templateTitle[2] templateTitle[3] in templateYValue[0] . \n The title states the data is limited to templateXValue[2] , but the dataset proves to show the global data , separated by templateXLabel[0] : templateXValue[0] , templateXValue[1] , templateXValue[2] , templateXValue[last] . \n The data is shown in units of templateScale templateYLabel[1] ( GBP ) .
generated: This graph describes the amount of Money spent on higher education in 200 .  \n The title states the data is limited to Asia , but the dataset proves to show the global data , separated by Continent : North_America , Europe Asia , Africa .  \n The data is shown in units of million Pounds ( GBP ) .

Example 499:
titleEntities: {'Subject': ['Lagos State University'], 'Date': []}
title: What Students at Lagos State University choose to study
X_Axis['Course', 'of', 'Study']: ['STEM', 'Literature', 'Philosophy', 'Medicine']
Y_Axis['Percentage']: ['15', '24', '30', '31']

gold: What the students at Lagos State University choose to study have been fairly equal with STEM being the lowest at 15 % and medicine being the highest at 31 % with the other course of studies being in between them .
gold_template: templateTitle[0] the templateTitle[1] at templateTitleSubject[0] templateTitle[5] to templateXLabel[1] have been fairly equal with templateXValue[0] being the lowest at templateYValue[min] templateScale and templateXValue[last] being the highest at templateYValue[max] templateScale with the other templateXLabel[0] of templateXLabel[1] being in between them .

generated_template: templateTitle[1] at templateTitleSubject[0] were less likely to be enrolled in templateXValue[0] templateXLabel[0] than in templateXValue[1] , templateXValue[2] and templateXValue[last] . The latter subjects were studied by at least half as many templateTitle[1] than templateXValue[0] was .
generated: Students at Lagos State University were less likely to be enrolled in STEM Course than in Literature , Philosophy and Medicine .  The latter subjects were studied by at least half as many Students than STEM was .

Example 528:
titleEntities: {'Subject': ['The'], 'Date': []}
title: The most frequent daily users of social media
X_Axis['Age', 'Group']: ['15-24', '25-34', '35-44', '45-54', '55-64']
Y_Axis['Minutes']: ['125', '75', '74', '150', '110']

gold: The following graph shows the most frequent users of social media by age group . 45 - 54 year olds come in top at 152 minutes a day . 25 - 34 and 35 - 44 year olds use social media the least at 76 minutes a day each .
gold_template: The following graph shows the templateTitle[0] templateTitle[1] templateTitle[3] of templateTitle[4] templateTitle[5] by templateXLabel[0] templateXLabel[1] . 45 - 54 year olds come in top at 152 templateYLabel[0] a day . 25 - 34 and 35 - 44 year olds templateTitle[3] templateTitle[4] templateTitle[5] the least at 76 templateYLabel[0] a day each .

generated_template: This graph shows the templateTitle[3] of templateTitle[4] templateTitle[5] per templateXLabel[0] templateXLabel[1] , from 15 years to 64 years . templateTitle[4] templateTitle[5] templateTitle[3] is greatest amongst 45 - 54 cohort ( templateYValue[max] templateYLabel[0] a day ) , followed by 15 - 24 templateXLabel[0] cohort ( templateYValue[0] templateYLabel[0] ) . The templateXLabel[1] with the templateTitle[0] amount of time on templateTitle[4] templateTitle[5] are 25 - 34 and 35 - 44 , both of which spend only templateYValue[1] templateYLabel[0] a day on templateTitle[4] templateTitle[5]
generated: This graph shows the users of social media per Age Group , from 15 years to 64 years .  social media users is greatest amongst 45 - 54 cohort ( 150 Minutes a day ) , followed by 15 - 24 Age cohort ( 125 Minutes ) .  The Group with the most amount of time on social media are 25 - 34 and 35 - 44 , both of which spend only 75 Minutes a day on social media . 

Example 662:
titleEntities: {'Subject': ['The'], 'Date': []}
title: The most successful teams in quiz competition
X_Axis['Team']: ['DIY', 'Cats', 'Lovely', 'Smart_Kids', 'Fearless', 'ABC']
Y_Axis['Number', 'of', 'mistakes']: ['4', '3', '9', '6', '1', '5']

gold: Fearless won the quiz , and were a few clear of nearest challengers Cats . Diy were 3rd followed closely by ABC . \\n Lovely were in last place .
gold_template: templateXValue[4] won the templateTitle[3] , and were a few clear of nearest challengers templateXValue[1] . templateXValue[0] were 3rd followed closely by templateXValue[last] . \\n templateXValue[2] were in last place .

generated_template: This chart compares the relative success of each templateXLabel[0] in the templateTitle[3] templateTitle[4] based on the templateYLabel[0] of templateYLabel[1] they made . templateXLabel[0] templateXValue[4] only had templateYValue[min] templateYLabel[1] , while templateXValue[1] , templateXValue[0] , templateXValue[last] and templateXValue[3] made between templateYValue[1] and templateYValue[3] . templateXLabel[0] templateXValue[2] made the most templateYLabel[1] , with templateYValue[max] templateYLabel[1] - an extra 50 templateScale compared to the next worst templateXLabel[0] .
generated: This chart compares the relative success of each Team in the quiz competition based on the Number of mistakes they made .  Team Fearless only had 1 mistakes , while Cats , DIY ABC and Smart_Kids made between 3 and 6 .  Team Lovely made the most mistakes , with 9 mistakes - an extra 50 % compared to the next worst Team .

