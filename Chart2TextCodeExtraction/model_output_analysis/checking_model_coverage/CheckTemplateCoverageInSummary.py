## this file checks the coverage of the template variables in the summary generated by the models
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import numpy as np

with open('./NewIzaData vs OldIzaData/NewIzaSummaryLabelCount.txt', 'r', encoding='utf-8') as file:
    labelCountsArr = file.read().splitlines()

with open('./NewIzaData vs OldIzaData/NewIzaSummaryWordCount.txt', 'r', encoding='utf-8') as file:
    wordCountsArr = file.read().splitlines()

assert len(labelCountsArr) == len(wordCountsArr)
print(len(labelCountsArr))


diffArr = []
diffArrBins = []
wordCountDict = {}

ratioArr = []
chartNumArr = []

##saving the difference of words-labels for each chart in diffArr
for i in range(len(labelCountsArr)):
    if int(wordCountsArr[i]) > int(labelCountsArr[i]):
        diffArr.append(int(wordCountsArr[i]) - int(labelCountsArr[i]))
    else:
        diffArr.append(int(labelCountsArr[i]) - int(wordCountsArr[i]))
    ratioArr.append(round(int(labelCountsArr[i]) / int(wordCountsArr[i]),2))
    chartNumArr.append(i)

diffArrBins = [0] * len(diffArr)
outliersCount = 0

##Making a dictionary with key as word count and value as number of charts
for i in range(len(diffArr)):
    diffArrBins[diffArr[i]] = diffArrBins[diffArr[i]] + 1 
    if diffArr[i] > 65:
        outliersCount = outliersCount + 1
    if(diffArr[i] == 0):
        print(i)


print('Outliers count ', outliersCount)

##checking if the count of charts matches the total charts we have
count = 0
for i in range(len(diffArrBins)):
     count = count + diffArrBins[i]

assert count == len(labelCountsArr)

##creating dictionary
for i in range(len(diffArrBins)):
    if diffArrBins[i] != 0:
        wordCountDict[i] = diffArrBins[i]

# print(wordCountDict)

##Calculating Quantiles for outlier detection
df = pd.DataFrame(diffArr)
Q1 = df[0].quantile(0.25)
Q3 = df[0].quantile(0.75)
IQR = Q3 - Q1

print('Q1 ', Q1)
print('Q3 ', Q3)
print('IQR ', IQR)
print('lower boundary: ', Q1 - 1.5 * IQR)
print('upper boundary: ', Q3 + 1.5 * IQR)

# print(df[np.logical_or(df[0] < (Q1 - 1.5 * IQR), df[0] > (Q3 + 1.5 * IQR))])

counts, bins, bars = plt.hist(ratioArr)
plt.show()

# sns.kdeplot(diffArr)
# sns.boxplot(y=diffArr)


##creating a bar plot
# x = []
# y = []
# for key in wordCountDict:
#     x.append(key)
#     y.append(wordCountDict[key])

# plt.bar(x, y)
# plt.xlabel("Word Difference Count")
# plt.ylabel("No. of charts")

##Creating a line plot
# plt.plot(chartNumArr, ratioArr)
# plt.title('ChartNo Vs Template Ratio', fontsize=14)
# plt.xlabel('Chart #', fontsize=14)
# plt.ylabel('Template Ratio template-count/word-count', fontsize=14)
# plt.grid(True)
# plt.show()

# plt.show()

# save the ratios in a text file
with open('./NewIzaData vs OldIzaData/NewIzaSummaryTemplateRatios.txt', mode='wt', encoding='utf8') as myfile1:
    myfile1.writelines("%s\n" % line for line in ratioArr)